name: EKS workflow
on:
  workflow_dispatch:

jobs:

  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: microservices
    # permissions:    # NOTE
    #   id-token: write
    #   contents: read
    steps:
     - name: Checkout
       uses: actions/checkout@v5.0.0
     
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v3
       with:
          terraform_version: 1.5.0
     
     - name: "Configure AWS Credentials"
       uses: aws-actions/configure-aws-credentials@v4
       with:
         aws-region: us-east-1
         #role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}  #created a secret for storing role_arn. ARN of the role to assume.
         aws-access-key-id: ${{ secrets.ACCESS_KEY }}
         aws-secret-access-key: ${{ secrets.SECRET_KEY }}

   #  - name: Test AWS Connection
   #    run:  aws sts get-caller-identity # if it is succeeded , it will show assumed IAM role. It will fail if you slct another branch bcz in OIDC we gave main branch
        
     - name: init
       run: terraform init
     - name: validate
       run: terraform validate     

    #  - name: Setup TFLint
    #    uses: terraform-linters/setup-tflint@v5.0.0
    #    with:
    #      tflint_version: latest # TFLint version to install. optional, default is latest
    #      #github_token: ${{ secrets.GITHUB_TOKEN }} # GitHub token - used when getting the latest version of tflint
  
    #  - name: Init TFLint
    #    run: tflint --init

    #  - name: Run TFLint
    #    run: tflint -f compact --recursive
    #    continue-on-error: true # Allow TFLint to run to completion and post results
       
     - name: plan
       run: terraform plan

     - name: apply
       run: terraform apply -auto-approve
    
    #  - name: Install kubectl
    #    uses: azure/setup-kubectl@v4
    #    with:
    #      version: '1.28.0'

    #  - name: Update kubeconfig
    #    run: |
    #      aws eks update-kubeconfig --name myekscluster --region us-east-1

    #  - name: Test kubernetes cluster and nodes are created or not
    #    run: kubectl get nodes

    #  - name: Apply Kubernetes manifests
    #    run: |
    #      kubectl apply -f k8s-manifests/deployment.yaml
    #      kubectl apply -f k8s-manifests/service.yaml
    #      kubectl apply -f k8s-manifests/ingress.yaml

     # # - name: destroy
     # #   run: terraform destroy -auto-approve
     - name: destroy
       run: terraform destroy -auto-approve

    #  - name: check if a specific repository exists in ECR or not.If not then create it
    #    run: aws ecr create-repository --repository-name flaskrepo >/dev/null 2>&1 || true #By default,It will return an error if the repository is not found. the failed command will print an error message to your terminal's standard error stream. To suppress this output and have a completely clean command, you can redirect the error stream to /dev/null

    #  - name: Build the docker image
    #    run: docker build -t pythonapp .

    #  - name: Login to ECR
    #    run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 561947681169.dkr.ecr.us-east-1.amazonaws.com/flaskrepo
       
    #  - name: Tag the image
    #    run: docker tag pythonapp:latest 561947681169.dkr.ecr.us-east-1.amazonaws.com/flaskrepo:latest

    #  - name: push the image to ECR
    #    run: docker push 561947681169.dkr.ecr.us-east-1.amazonaws.com/appointmentrepo:latest
       

    
      
        
